import json
from fastapi.testclient import TestClient

import os
import sys

# Get the current script's directory
current_script_dir = os.path.dirname(os.path.abspath(__file__))

# Add the project directory to sys.path
project_dir = os.path.abspath(os.path.join(current_script_dir, '../..'))
sys.path.append(project_dir)

# Now you can use an absolute import
from app.main import app

client = TestClient(app)

def test_predict_endpoint_single_row():
    # test case 1 with 1 row 2 column of data
    data = {
      "data": [
        {
          "x0": 0.042317,
          "x1": -3.344721,
          "x2": 4.6351242122,
          "x3": -0.5983959993,
          "x4": -0.6477715046,
          "x5": "monday",
          "x6": 0.184902,
          "x7": 46.690015,
          "x8": 3.034132,
          "x9": 0.364704,
          "x10": 14.260733,
          "x11": -1.559332,
          "x12": "$5,547.78",
          "x13": 0.520324,
          "x14": 31.212255,
          "x15": 4.891671,
          "x16": 0.357763,
          "x17": 14.766366,
          "x18": -17.467243,
          "x19": 0.224628,
          "x20": 0.096752,
          "x21": 1.305564,
          "x22": 0.353632,
          "x23": 3.909028,
          "x24": -91.273052,
          "x25": 1.396952,
          "x26": 4.401593,
          "x27": 0.443086,
          "x28": 14.048787,
          "x29": -0.932243,
          "x30": 5.255472,
          "x31": "germany",
          "x32": 0.54199153,
          "x33": 2.98948039,
          "x34": -1.78334189,
          "x35": 0.80127315,
          "x36": -2.60231221,
          "x37": 3.39682926,
          "x38": -1.22322646,
          "x39": -2.20977636,
          "x40": -68.69,
          "x41": 522.25,
          "x42": -428.69,
          "x43": 381.37,
          "x44": 0.0197503,
          "x45": 0.75116479,
          "x46": 0.8630479008,
          "x47": -1.0383166613,
          "x48": -0.2726187635,
          "x49": -0.3430207259,
          "x50": 0.3109008666,
          "x51": -0.797841974,
          "x52": -2.0390175153,
          "x53": 0.87182889,
          "x54": 0.14373012,
          "x55": -1.15212514,
          "x56": -2.1703139704,
          "x57": -0.267842962,
          "x58": 0.212110633,
          "x59": 1.6926559407,
          "x60": -0.9522767913,
          "x61": -0.8625864974,
          "x62": 0.0748487158,
          "x63": "36.29%",
          "x64": 3.47125327,
          "x65": -3.16656509,
          "x66": 0.65446814,
          "x67": 14.60067029,
          "x68": -20.57521013,
          "x69": 0.71083785,
          "x70": 0.16983767,
          "x71": 0.55082127,
          "x72": 0.62814576,
          "x73": 3.38608078,
          "x74": -112.45263714,
          "x75": 1.48370808,
          "x76": 1.77035368,
          "x77": 0.75702363,
          "x78": 14.75731742,
          "x79": -0.62550355,
          "x80": None,
          "x81": "October",
          "x82": "Female",
          "x83": -0.7116680715,
          "x84": -0.2653559892,
          "x85": 0.5175495907,
          "x86": -1.0881027092,
          "x87": -1.8188638198,
          "x88": -1.3584469527,
          "x89": -0.654995195,
          "x90": -0.4933042262,
          "x91": 0.373853,
          "x92": 0.94143481,
          "x93": 3.54679834,
          "x94": -99.8574882,
          "x95": 0.403926,
          "x96": 1.65378726,
          "x97": 0.00771459,
          "x98": -32.02164582,
          "x99": -60.3127828
        }
      ]
    }

    response = client.post("/predict", json=data)
   

    assert response.status_code == 200
    result = response.json()
    assert "class_probability" in result
    assert "input_variables" in result
    assert "predicted_class" in result

def test_predict_endpoint_multiple_rows():
    # test case 2 with 2 rows of data
    data = {
    "data": [
    {
      "x0": -1.018506,
      "x1": -4.180869,
      "x2": 5.703058724,
      "x3": -0.522021597,
      "x4": -1.678553956,
      "x5": "tuesday",
      "x6": 0.18617,
      "x7": 30.162959,
      "x8": 1.200073,
      "x9": 0.373124,
      "x10": 14.973894,
      "x11": -0.81238,
      "x12": "$6,882.34 ",
      "x13": 0.078341,
      "x14": 32.823072,
      "x15": 0.02048,
      "x16": 0.171077,
      "x17": 14.236199,
      "x18": -18.646051,
      "x19": 0.575313,
      "x20": 0.068703,
      "x21": -0.276702,
      "x22": 0.754378,
      "x23": 3.103192,
      "x24": -101.889723,
      "x25": 1.49565,
      "x26": 3.412199,
      "x27": 0.601394,
      "x28": 14.210012,
      "x29": 0.558285,
      "x30": 4.21066,
      "x31": "germany",
      "x32": 0.07303966,
      "x33": 2.99793546,
      "x34": -1.91981754,
      "x35": 1.11327381,
      "x36": -0.75988365,
      "x37": 3.00740356,
      "x38": -1.76639977,
      "x39": -1.93067723,
      "x40": 288.2,
      "x41": 129.79,
      "x42": 366.71,
      "x43": -1134.56,
      "x44": 0.98441208,
      "x45": 1.10833973,
      "x46": 0.495749506,
      "x47": 0.422930348,
      "x48": 1.628712455,
      "x49": 0.402797858,
      "x50": -0.272326826,
      "x51": 1.48269105,
      "x52": -2.095101799,
      "x53": 0.33612654,
      "x54": 0.39604464,
      "x55": 0.43767884,
      "x56": 0.137700027,
      "x57": 0.53142961,
      "x58": 0.228881625,
      "x59": -0.222421763,
      "x60": 0.561192069,
      "x61": 1.129407195,
      "x62": 0.373941237,
      "x63": "62.59%",
      "x64": 33.79248734,
      "x65": -0.1522697,
      "x66": 0.34106988,
      "x67": 14.39211979,
      "x68": -20.60214825,
      "x69": 0.02168046,
      "x70": 0.12436805,
      "x71": 2.80831588,
      "x72": 0.48941937,
      "x73": 3.07847637,
      "x74": -86.44286813,
      "x75": 0.4088527,
      "x76": None,
      "x77": 0.80646678,
      "x78": 14.02814387,
      "x79": 0.12779922,
      "x80": 3.25437849,
      "x81": "April",
      "x82": "Female",
      "x83": 0.460470644,
      "x84": -1.129221693,
      "x85": -0.124149454,
      "x86": -1.650432198,
      "x87": -1.295166064,
      "x88": 0.076903248,
      "x89": -1.123881898,
      "x90": 0.323156018,
      "x91": 0.04191,
      "x92": 0.33889244,
      "x93": 3.52499912,
      "x94": -97.7151381,
      "x95": 1.44463704,
      "x96": 2.72855326,
      "x97": 0.71872513,
      "x98": -32.94590765,
      "x99": 2.55535888
    },
    {
      "x0": -1.91922,
      "x1": 0.451107,
      "x2": 4.823385218,
      "x3": -2.014568798,
      "x4": -1.211901352,
      "x5": "saturday",
      "x6": 0.818817,
      "x7": 14.490744,
      "x8": 4.130146,
      "x9": 0.314697,
      "x10": 14.523697,
      "x11": -0.437126,
      "x12": "$5,647.81 ",
      "x13": 0.961171,
      "x14": 4.506393,
      "x15": -0.034884,
      "x16": 0.377442,
      "x17": 14.843366,
      "x18": -20.130724,
      "x19": 0.204912,
      "x20": 0.169658,
      "x21": 4.461883,
      "x22": 0.266263,
      "x23": 3.4797,
      "x24": -89.406884,
      "x25": 0.036239,
      "x26": 4.753809,
      "x27": 0.79404,
      "x28": 14.542696,
      "x29": -2.001962,
      "x30": 5.116089,
      "x31": "asia",
      "x32": 0.29843434,
      "x33": 2.53769947,
      "x34": -1.91607814,
      "x35": 0.07282569,
      "x36": 1.86990946,
      "x37": 3.01620868,
      "x38": -1.02270516,
      "x39": -1.62216143,
      "x40": 1025.23,
      "x41": 1638.37,
      "x42": 356.32,
      "x43": 64.98,
      "x44": 0.90862255,
      "x45": 0.07151007,
      "x46": -0.264361187,
      "x47": 0.122219801,
      "x48": -0.599600083,
      "x49": -0.51763746,
      "x50": -0.486018261,
      "x51": -0.602458804,
      "x52": -1.155273213,
      "x53": 0.11320627,
      "x54": -0.47121462,
      "x55": -0.31419697,
      "x56": 0.117109274,
      "x57": 1.433867265,
      "x58": 1.087831298,
      "x59": 1.252419764,
      "x60": 0.990040485,
      "x61": None,
      "x62": -0.172095793,
      "x63": "3.11%",
      "x64": 18.80764932,
      "x65": 3.94112762,
      "x66": 0.23404821,
      "x67": 14.10636442,
      "x68": -19.39177951,
      "x69": 0.11138828,
      "x70": 0.13267491,
      "x71": None,
      "x72": 0.07291669,
      "x73": 3.91079332,
      "x74": -112.2446682,
      "x75": None,
      "x76": 1.32079944,
      "x77": 0.93493914,
      "x78": 14.02816023,
      "x79": -2.0781114,
      "x80": 5.46421613,
      "x81": "December",
      "x82": "Male",
      "x83": 1.270105815,
      "x84": -0.298663673,
      "x85": 0.131659375,
      "x86": 0.05540591,
      "x87": 1.051899435,
      "x88": 1.270084099,
      "x89": 0.36856837,
      "x90": 1.472641222,
      "x91": 0.385252,
      "x92": 0.04926468,
      "x93": 3.41350819,
      "x94": -106.0641019,
      "x95": 0.28321709,
      "x96": 2.70381923,
      "x97": 0.7234908,
      "x98": -32.16680209,
      "x99": 15.34720884
    }
        ]
    }
    response = client.post("/predict", json=data)

    assert response.status_code == 200
    result = response.json()
    assert "class_probability" in result
    assert "input_variables" in result
    assert "predicted_class" in result


def test_upload_file_and_predict():
    # Create a TestClient instance
    client = TestClient(app)

    # Prepare a sample JSON file content
    with open('test_input.json', 'r') as f:
        json_content = json.load(f)

    # Convert the JSON content to a string
    json_string = json.dumps(json_content)

    # Simulate file upload
    response = client.post("/uploadfile/", files={"file": ("data.json", json_string, "application/json")})

    # Assert the response status code and content
    assert response.status_code == 200
    result = response.json()
    assert "class_probability" in result
    assert "input_variables" in result
    assert "predicted_class" in result
